@page "/register"
@rendermode InteractiveServer
@using FFCProject.Models
@inject NavigationManager Navigation
@inject FFCProject.Data.AppDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using System.Security.Cryptography
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using NetcodeHub.Packages.Components.Toast;
@inject ToastService ToastService

<Toast @ref="ToastService.ToastComponent" />

<EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login-wrapper">
        <div class="login-box">

            <!-- ✅ FFC Logo Above Heading -->
            <div class="text-center">
                <img src="images/FFC-logo.png" alt="FFC Logo" class="ffc-logo mb-2" />
            </div>

            <h3 class="mb-4 text-white text-center">Register</h3>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger py-1">@ErrorMessage</div>
            }

            <!-- ✅ Input Fields with Icons -->
            <div class="form-group input-icon">
                <i class="fa fa-user"></i>
                <InputText class="form-control" @bind-Value="newUser.FirstName" placeholder="First Name" />
                <ValidationMessage For="@(() => newUser.FirstName)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-user"></i>
                <InputText class="form-control" @bind-Value="newUser.LastName" placeholder="Last Name" />
                <ValidationMessage For="@(() => newUser.LastName)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-user-circle"></i>
                <InputText class="form-control" @bind-Value="newUser.Username" placeholder="Username" />
                <ValidationMessage For="@(() => newUser.Username)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-envelope"></i>
                <InputText class="form-control" @bind-Value="newUser.Email" placeholder="Email" />
                <ValidationMessage For="@(() => newUser.Email)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-lock"></i>
                <InputText class="form-control" type="password" @bind-Value="newUser.Password" placeholder="Password" />
                <ValidationMessage For="@(() => newUser.Password)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-lock"></i>
                <InputText class="form-control" type="password" @bind-Value="newUser.ConfirmPassword" placeholder="Confirm Password" />
                <ValidationMessage For="@(() => newUser.ConfirmPassword)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-briefcase"></i>
                <InputText class="form-control" @bind-Value="newUser.Designation" placeholder="Designation" />
                <ValidationMessage For="@(() => newUser.Designation)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-phone"></i>
                <InputText class="form-control" @bind-Value="newUser.ContactNumber" placeholder="Contact Number" />
                <ValidationMessage For="@(() => newUser.ContactNumber)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-home"></i>
                <InputText class="form-control" @bind-Value="newUser.Address" placeholder="Address" />
                <ValidationMessage For="@(() => newUser.Address)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-map-pin"></i>
                <InputText class="form-control" @bind-Value="newUser.PostalCode" placeholder="Postal Code" />
                <ValidationMessage For="@(() => newUser.PostalCode)" />
            </div>

            <div class="form-group input-icon">
                <i class="fa fa-map-marker-alt"></i>
                <InputText class="form-control" @bind-Value="newUser.PermanentAddress" placeholder="Permanent Address" />
                <ValidationMessage For="@(() => newUser.PermanentAddress)" />
            </div>

            <button type="submit" class="btn-register" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span><i class="fa fa-spinner fa-spin"></i> Registering...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>

            <p class="text-white mt-3 text-center">
                Already have an account? <a href="/login" class="text-white"><u>Login</u></a>
            </p>
        </div>
    </div>
</EditForm>

<style>
    .input-icon {
        position: relative;
    }

        .input-icon i {
            position: absolute;
            top: 50%;
            left: 10px;
            transform: translateY(-50%);
            color: white;
        }

    .form-control {
        padding-left: 35px;
        background-color: rgba(0, 0, 0, 0.7);
        border: 2px solid transparent;
        border-radius: 8px;
        color: white;
        height: 36px;
        font-size: 13px;
    }

        .form-control::placeholder {
            color: white;
        }

        .form-control:focus {
            border-color: #00ffff;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            box-shadow: 0 0 6px #00ffff, 0 0 10px #00ffff88;
        }

    .login-wrapper {
        min-height: 100vh;
        background: linear-gradient(to bottom right, #2c2c2c, #bfa443);
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .login-box {
        width: 100%;
        max-width: 700px;
        max-height: 95vh;
        overflow-y: auto;
        padding: 30px;
        background: transparent;
        border-radius: 15px;
        backdrop-filter: blur(12px);
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.5);
        color: white;
    }

    .ffc-logo {
        max-width: 150px;
        height: auto;
    }

    .btn-register {
        width: 100%;
        height: 40px;
        background-color: black;
        color: white;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        font-size: 14px;
    }

        .btn-register:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .btn-register:hover:enabled {
            background-color: navy;
        }

    .form-group {
        margin-bottom: 15px;
    }
</style>

@code {
    private RegisterViewModel newUser = new();
    private string ErrorMessage;
    private bool IsLoading = false;

    private string HashPassword(string password, out string salt)
    {
        byte[] saltBytes = new byte[128 / 8];
        using var rng = RandomNumberGenerator.Create();
        rng.GetBytes(saltBytes);
        salt = Convert.ToBase64String(saltBytes);

        string hashed = Convert.ToBase64String(KeyDerivation.Pbkdf2(
            password: password,
            salt: saltBytes,
            prf: KeyDerivationPrf.HMACSHA256,
            iterationCount: 10000,
            numBytesRequested: 256 / 8));

        return hashed;
    }

    private async Task HandleValidSubmit()
    {
        IsLoading = true;
        ErrorMessage = "";
        StateHasChanged();

        try
        {
            bool userExists = await DbContext.Users.AnyAsync(u => u.Username == newUser.Username);
            if (userExists)
            {
                ErrorMessage = "Username already exists.";
                ToastService.ShowErrorToast("❌ Username already exists.", "Registration Failed");
                return;
            }

            string salt;
            string hashedPassword = HashPassword(newUser.Password, out salt);

            var user = new User
            {
                FirstName = newUser.FirstName,
                LastName = newUser.LastName,
                Username = newUser.Username,
                Email = newUser.Email,
                Password = $"{salt}.{hashedPassword}",
                Designation = newUser.Designation,
                ContactNumber = newUser.ContactNumber,
                Address = newUser.Address,
                PostalCode = newUser.PostalCode,
                PermanentAddress = newUser.PermanentAddress
            };

            DbContext.Users.Add(user);
            await DbContext.SaveChangesAsync();

            ToastService.ShowSuccessToast("✅ Registration successful. You can now login.", "Success");
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred. Please try again.";
            ToastService.ShowErrorToast("❌ Registration failed.", "Error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}
