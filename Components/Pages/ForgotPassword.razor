@page "/forgot-password"
@using Microsoft.EntityFrameworkCore
@inject FFCProject.Data.AppDbContext DbContext
@inject EmailSystem EmailSender
@inject NavigationManager Navigation
@using NetcodeHub.Packages.Components.Toast
@inject ToastService ToastService
@rendermode InteractiveServer

<Toast @ref="ToastService.ToastComponent" />

<EditForm Model="@model" OnValidSubmit="SendOtp">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="forgot-wrapper d-flex justify-content-center align-items-center">
        <div class="forgot-box text-center p-4">

            <h3 class="mb-4 text-white">Forgot Password</h3>

            <div class="form-group input-icon mb-3">
                <i class="fa fa-envelope" style="color:black;"></i>
                <InputText class="form-control hover-effect" @bind-Value="model.Email" placeholder="Enter your registered email" autocomplete="email" />
            </div>

            <button type="submit" class="btn btn-light w-100 mb-3" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span>Sending...</span>
                }
                else
                {
                    <span>Send OTP</span>
                }
            </button>

            <p class="text-white">
                Remembered? <a href="/login" class="text-white">Login</a>
            </p>
        </div>
    </div>
</EditForm>

<style>
    .hover-effect {
        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;
    }

        .hover-effect:hover {
            background-color: rgba(255, 255, 255, 0.5) !important;
            color: black !important;
        }

    .forgot-wrapper {
        height: 100vh;
        background: linear-gradient(to bottom right, #2c2c2c, #bfa443);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .forgot-box {
        width: 400px; /* slightly wider */
        background: rgba(255, 255, 255, 0.08);
        border-radius: 15px;
        backdrop-filter: blur(10px);
        box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    }

    .form-group {
        position: relative;
    }

    .input-icon i {
        position: absolute;
        top: 50%;
        left: 10px;
        transform: translateY(-50%);
        color: black;
    }

    .form-control {
        padding-left: 35px; /* space for icon */
        background-color: rgba(255, 255, 255, 0.3);
        border: none;
        color: white;
    }

        .form-control::placeholder {
            color: #eee;
        }

        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.4);
            color: black;
            box-shadow: none;
        }
</style>

@code {
    private ForgotPasswordModel model = new();
    private bool IsLoading = false;

    private async Task SendOtp()
    {
        IsLoading = true;
        StateHasChanged();

        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == model.Email);
        if (user == null)
        {
            ToastService.ShowErrorToast("❌ Email not found.", "Error");
            IsLoading = false;
            return;
        }

        string otp = new Random().Next(100000, 999999).ToString();

        var oldOtps = DbContext.OtpEntries.Where(o => o.Email == model.Email);
        DbContext.OtpEntries.RemoveRange(oldOtps);

        DbContext.OtpEntries.Add(new OtpEntry
        {
            Email = model.Email,
            OTP = otp,
            Expiry = DateTime.Now.AddMinutes(5)
        });

        await DbContext.SaveChangesAsync();

        bool emailSent = await EmailSender.SendEmailAsync(
            model.Email,
            "FFC Password Reset OTP",
            $"<p>Your password reset OTP is: <strong>{otp}</strong></p><p>This code will expire in 5 minutes.</p>"
        );

        if (emailSent)
        {
            ToastService.ShowSuccessToast("✅ OTP sent to your email.", "OTP Sent");
            Navigation.NavigateTo($"/reset-password/{model.Email}");
        }
        else
        {
            ToastService.ShowErrorToast("❌ Failed to send OTP. Try again.", "Email Error");
        }

        IsLoading = false;
    }

    public class ForgotPasswordModel
    {
        public string Email { get; set; }
    }
}
