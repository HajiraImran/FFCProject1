@page "/it/assets"
@inject AppDbContext DbContext
@inject UserStateService UserState
@inject NavigationManager Navigation
@using FFCProject.Data
@using FFCProject.Models
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer


<h3 class="text-white">Manage Assets</h3>

@if (isLoading)
{
    <p class="text-white">Loading...</p>
}
else
{
    <EditForm Model="newAsset" OnValidSubmit="AddAsset" FormName="AssetForm">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <InputText class="form-control" @bind-Value="newAsset.Name" placeholder="Asset Name" />
            <ValidationMessage For="@(() => newAsset.Name)" />
        </div>

        <div class="form-group">
            <InputText class="form-control" @bind-Value="newAsset.Category" placeholder="Category" />
        </div>

        <div class="form-group">
            <InputText class="form-control" @bind-Value="newAsset.SerialNumber" placeholder="Serial Number" />
            <ValidationMessage For="@(() => newAsset.SerialNumber)" />
        </div>

        <div class="form-group">
            <InputText class="form-control" @bind-Value="newAsset.AssignedTo" placeholder="Assigned To" />
        </div>

        <button type="submit" class="btn btn-success">➕ Add Asset</button>
    </EditForm>

    <hr />

    <h5 class="text-white">Existing Assets</h5>

    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Category</th>
                <th>Serial</th>
                <th>Assigned To</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in assets)
            {
                if (editAssetId == asset.Id)
                {
                    <tr>
                        <td><InputText class="form-control" @bind-Value="editAsset.Name" /></td>
                        <td><InputText class="form-control" @bind-Value="editAsset.Category" /></td>
                        <td><InputText class="form-control" @bind-Value="editAsset.SerialNumber" /></td>
                        <td><InputText class="form-control" @bind-Value="editAsset.AssignedTo" /></td>
                        <td>@asset.AssignedDate.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-sm btn-success" @onclick="() => SaveEdit(asset.Id)">💾 Save</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelEdit">✖ Cancel</button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@asset.Name</td>
                        <td>@asset.Category</td>
                        <td>@asset.SerialNumber</td>
                        <td>@asset.AssignedTo</td>
                        <td>@asset.AssignedDate.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-sm btn-warning" @onclick="() => EditAsset(asset)">✏ Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteAsset(asset.Id)">🗑 Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

<style>
    input.form-control {
        background-color: #2c2c2c;
        color: #fff;
        border: 1px solid #555;
    }

        input.form-control:focus {
            border-color: #f1c40f;
            box-shadow: none;
        }

</style>

@code {
    private bool isLoading = true;
    private List<Asset> assets = new();
    private Asset newAsset = new();
    private Asset editAsset = new();
    private int? editAssetId = null;

    protected override async Task OnInitializedAsync()
    {
        var user = await DbContext.Users.FirstOrDefaultAsync(u => u.Email == UserState.Email);
        if (user?.Designation?.ToLower() != "it")
        {
            Navigation.NavigateTo("/unauthorized", true);
            return;
        }

        assets = await DbContext.Assets.OrderByDescending(a => a.AssignedDate).ToListAsync();
        isLoading = false;
    }

    private async Task AddAsset()
    {
        DbContext.Assets.Add(newAsset);
        await DbContext.SaveChangesAsync();

        newAsset = new Asset();
        await LoadAssets();
    }

    private void EditAsset(Asset asset)
    {
        editAsset = new Asset
        {
            Id = asset.Id,
            Name = asset.Name,
            Category = asset.Category,
            SerialNumber = asset.SerialNumber,
            AssignedTo = asset.AssignedTo,
            AssignedDate = asset.AssignedDate
        };
        editAssetId = asset.Id;
    }

    private async Task SaveEdit(int id)
    {
        var original = await DbContext.Assets.FindAsync(id);
        if (original != null)
        {
            original.Name = editAsset.Name;
            original.Category = editAsset.Category;
            original.SerialNumber = editAsset.SerialNumber;
            original.AssignedTo = editAsset.AssignedTo;

            await DbContext.SaveChangesAsync();
            editAssetId = null;
            await LoadAssets();
        }
    }

    private void CancelEdit()
    {
        editAssetId = null;
        editAsset = new Asset();
    }

    private async Task DeleteAsset(int id)
    {
        var asset = await DbContext.Assets.FindAsync(id);
        if (asset != null)
        {
            DbContext.Assets.Remove(asset);
            await DbContext.SaveChangesAsync();
            await LoadAssets();
        }
    }

    private async Task LoadAssets()
    {
        assets = await DbContext.Assets.OrderByDescending(a => a.AssignedDate).ToListAsync();
    }
}
